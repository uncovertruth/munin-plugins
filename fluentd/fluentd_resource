#!/usr/bin/python
import os
import sys
import subprocess


def get_metrics(condition):
    cpu, mem, size, rss = [0,0,0,0]
    if condition is None:
        return cpu, mem, size, rss
    out, err = subprocess.Popen("ps aux | " + condition, shell=True, stdout=subprocess.PIPE).communicate()
    ret = out.splitlines()
    for r in ret:
        params = r.split()
        if len(params) < 6:
            continue
        cpu += float(params[2])
        mem += float(params[3])
        size += int(params[4])
        rss += int(params[5])
    
    return cpu, mem, size, rss


def munin(condition, target):
    cpu,mem,size,rss = get_metrics(condition)
    enable_share = target is None or target == "share"
    enable_size = target is None or target == "size"
    if enable_share:
        print "cpu.value " + str(cpu)
        print "mem.value " + str(mem)
    if enable_size:
        print "size.value " + str(size)
        print "rss.value " + str(rss)


def config(target):
    if target:
        print "graph_title fluentd resource(" + target + ")"
    else:
        print "graph_title fluentd resource usage"
    print "graph_category fluentd"
    
    enable_share = target is None or target == "share"
    enable_size = target is None or target == "size"
    if enable_share:
        print "cpu.label cpu"
        print "cpu.draw LINE1"
        print "mem.label mem"
        print "mem.draw LINE1"
    if enable_size:
        print "size.label size"
        print "size.draw LINE1"
        print "rss.label rss"
        print "rss.draw LINE1"


if __name__ == "__main__":
    file_name = os.path.basename(__file__)
    target = None
    if file_name.startswith("fluentd_resource_"):
        target = file_name[len("fluentd_resource_"):]

    if os.environ.get('package'):
        package = os.environ.get('package')
    else: 
        package = 'fluentd'

    if package == "fluentd":
        condition = " grep ruby | grep fluentd | grep -v grep "
    elif package == "td-agent":
        condition = " grep ruby | grep td-agent | grep -v grep "
    else: 
        condition = os.environ.get('condition')

    if len(sys.argv) > 1 and sys.argv[1] == "config":
        config(target)
    else:
        munin(condition, target)
